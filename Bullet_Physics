using UnityEngine;
using System.Collections;
using System;
 
[RequireComponent(typeof(Rigidbody))]
 
public class Ballistics : MonoBehaviour
{
    Rigidbody rb;
 
    public double ballisticCoefficient;
    public enum gModel { G1, G2, G5, G6, G7, G8 };
    public gModel bulletGModel;
    [Tooltip("Grains")]
    public double bulletMass;
    [Tooltip("Inches")]
    public double bulletDiameter;
    [Tooltip("Inches")]
    public double bulletLength;
    [Tooltip("Feet per second")]
    public double muzzleVelocity;
    [Tooltip("Inches per twist")]
    public double barrelTwist;
    [Tooltip("Fahrenheit")]
    public double temperature;
    [Tooltip("In Hg")]
    public double airPressure;
    [Tooltip("Degrees from equator")]
    public double currentLatitude;
 
    [Tooltip("m/s")]
    public Vector3 windVect;
 
    private float GRAVITY_AMOUNT;
    private float DT; //Delta time
    private double START_TIME;
 
    //Getting components for calculating retardation
    private double velocityMagnitude;
    private double retardation;
    private double drag;
 
    private double stabilityFactor;
 
    private double timeOfFlight;
    private double bulletDirection;
 
    private double distance;
 
    private Vector3 START_POSITION;
    private Vector3 GRAVITY;
    private Vector3 previousDrift;
    private Vector3 vectorSpin;
    private Vector3 transonicAccel;
    private Vector3 vectorDrag;
    private Vector3 trueVelocity;
    private Vector3 vectorCentripetal;
    private Vector3 vectorCoriolis;
    private Vector3 previousCoriolisDeflection;
 
    void OnEnable()
    {
        rb = GetComponent<Rigidbody>();
        convertUnits();
        setInitialParameters();
        calculateStabilityFactor();
    }
 
    void FixedUpdate()
    {
        getSpeed();
        getTOF();
        getPosition();
        calculateRetardation();
        calculateDrag();
        calculateSpinDrift();
        calculateCoriolis();
        updateVelocity();
    }
 
    void setInitialParameters()
    {
        START_TIME = Time.time;
        DT = Time.fixedDeltaTime;
        START_POSITION = transform.position;
 
        GRAVITY_AMOUNT = -9.80665f;
        GRAVITY = new Vector3(0, GRAVITY_AMOUNT * DT, 0);
 
        muzzleVelocity = muzzleVelocity * 0.3048f;
    }
 
    void calculateStabilityFactor()
    {
        double lCalibers = bulletLength / bulletDiameter;
        double twistCalibers = barrelTwist / bulletDiameter;
 
        stabilityFactor = 30 * bulletWeight / (Math.Pow(twistCalibers, 2) * Math.Pow(bulletDiameter, 3) * lCalibers * (1 + Math.Pow(lCalibers, 2)));
        stabilityFactor = stabilityFactor * Math.Pow(((muzzleVelocity / 0.3048) / 2800f), (1f / 3f));
        stabilityFactor = stabilityFactor * (temperature + 273.15) / (15 + 273.15) * 1013.25 / airPressure;
    }
 
    void convertUnits()
    {
        currentLatitude = Math.PI / 180 * currentLatitude;
        temperature = (temperature - 32) * 5f / 9f;
        airPressure = airPressure * 33.863886666718315;
    }
 
    void getSpeed()
    {
        velocityMagnitude = rb.velocity.magnitude;
        trueVelocity = rb.velocity + windVect * DT;
    }
 
    void getTOF()
    {
        timeOfFlight = Time.time - START_TIME;
    }
 
    void getPosition()
    {
        bulletDirection = Mathf.Atan2(rb.velocity.z, rb.velocity.x);
        distance = Vector3.Distance(transform.position, START_POSITION);
    }
 
    void calculateRetardation()
    {
        double velFps = velocityMagnitude * 3.2808399;
        double A = -1;
        double M = -1;
 
        if (bulletGModel == gModel.G1)
        {
            if (velFps > 4230) { A = 1.477404177730177e-04; M = 1.9565; }
            else if (velFps > 3680) { A = 1.920339268755614e-04; M = 1.925; }
            else if (velFps > 3450) { A = 2.894751026819746e-04; M = 1.875; }
            else if (velFps > 3295) { A = 4.349905111115636e-04; M = 1.825; }
            else if (velFps > 3130) { A = 6.520421871892662e-04; M = 1.775; }
            else if (velFps > 2960) { A = 9.748073694078696e-04; M = 1.725; }
            else if (velFps > 2830) { A = 1.453721560187286e-03; M = 1.675; }
            else if (velFps > 2680) { A = 2.162887202930376e-03; M = 1.625; }
            else if (velFps > 2460) { A = 3.209559783129881e-03; M = 1.575; }
            else if (velFps > 2225) { A = 3.904368218691249e-03; M = 1.55; }
            else if (velFps > 2015) { A = 3.222942271262336e-03; M = 1.575; }
            else if (velFps > 1890) { A = 2.203329542297809e-03; M = 1.625; }
            else if (velFps > 1810) { A = 1.511001028891904e-03; M = 1.675; }
            else if (velFps > 1730) { A = 8.609957592468259e-04; M = 1.75; }
            else if (velFps > 1595) { A = 4.086146797305117e-04; M = 1.85; }
            else if (velFps > 1520) { A = 1.954473210037398e-04; M = 1.95; }
            else if (velFps > 1420) { A = 5.431896266462351e-05; M = 2.125; }
            else if (velFps > 1360) { A = 8.847742581674416e-06; M = 2.375; }
            else if (velFps > 1315) { A = 1.456922328720298e-06; M = 2.625; }
            else if (velFps > 1280) { A = 2.419485191895565e-07; M = 2.875; }
            else if (velFps > 1220) { A = 1.657956321067612e-08; M = 3.25; }
            else if (velFps > 1185) { A = 4.745469537157371e-10; M = 3.75; }
            else if (velFps > 1150) { A = 1.379746590025088e-11; M = 4.25; }
            else if (velFps > 1100) { A = 4.070157961147882e-13; M = 4.75; }
            else if (velFps > 1060) { A = 2.938236954847331e-14; M = 5.125; }
            else if (velFps > 1025) { A = 1.228597370774746e-14; M = 5.25; }
            else if (velFps > 980) { A = 2.916938264100495e-14; M = 5.125; }
            else if (velFps > 945) { A = 3.855099424807451e-13; M = 4.75; }
            else if (velFps > 905) { A = 1.185097045689854e-11; M = 4.25; }
            else if (velFps > 860) { A = 3.566129470974951e-10; M = 3.75; }
            else if (velFps > 810) { A = 1.045513263966272e-08; M = 3.25; }
            else if (velFps > 780) { A = 1.291159200846216e-07; M = 2.875; }
            else if (velFps > 750) { A = 6.824429329105383e-07; M = 2.625; }
            else if (velFps > 700) { A = 3.569169672385163e-06; M = 2.375; }
            else if (velFps > 640) { A = 1.839015095899579e-05; M = 2.125; }
            else if (velFps > 600) { A = 5.71117468873424e-05; M = 1.950; }
            else if (velFps > 550) { A = 9.226557091973427e-05; M = 1.875; }
            else if (velFps > 250) { A = 9.337991957131389e-05; M = 1.875; }
            else if (velFps > 100) { A = 7.225247327590413e-05; M = 1.925; }
            else if (velFps > 65) { A = 5.792684957074546e-05; M = 1.975; }
            else if (velFps > 0) { A = 5.206214107320588e-05; M = 2.000; }
        }
 
        if (bulletGModel == gModel.G2)
        {
            if (velFps > 1674) { A = .0079470052136733; M = 1.36999902851493; }
            else if (velFps > 1172) { A = 1.00419763721974e-03; M = 1.65392237010294; }
            else if (velFps > 1060) { A = 7.15571228255369e-23; M = 7.91913562392361; }
            else if (velFps > 949) { A = 1.39589807205091e-10; M = 3.81439537623717; }
            else if (velFps > 670) { A = 2.34364342818625e-04; M = 1.71869536324748; }
            else if (velFps > 335) { A = 1.77962438921838e-04; M = 1.76877550388679; }
            else if (velFps > 0) { A = 5.18033561289704e-05; M = 1.98160270524632; }
        }
 
        if (bulletGModel == gModel.G5)
        {
            if (velFps > 1730) { A = 7.24854775171929e-03; M = 1.41538574492812; }
            else if (velFps > 1228) { A = 3.50563361516117e-05; M = 2.13077307854948; }
            else if (velFps > 1116) { A = 1.84029481181151e-13; M = 4.81927320350395; }
            else if (velFps > 1004) { A = 1.34713064017409e-22; M = 7.8100555281422; }
            else if (velFps > 837) { A = 1.03965974081168e-07; M = 2.84204791809926; }
            else if (velFps > 335) { A = 1.09301593869823e-04; M = 1.81096361579504; }
            else if (velFps > 0) { A = 3.51963178524273e-05; M = 2.00477856801111; }
        }
 
        if (bulletGModel == gModel.G6)
        {
            if (velFps > 3236) { A = 0.0455384883480781; M = 1.15997674041274; }
            else if (velFps > 2065) { A = 7.167261849653769e-02; M = 1.10704436538885; }
            else if (velFps > 1311) { A = 1.66676386084348e-03; M = 1.60085100195952; }
            else if (velFps > 1144) { A = 1.01482730119215e-07; M = 2.9569674731838; }
            else if (velFps > 1004) { A = 4.31542773103552e-18; M = 6.34106317069757; }
            else if (velFps > 670) { A = 2.04835650496866e-05; M = 2.11688446325998; }
            else if (velFps > 0) { A = 7.50912466084823e-05; M = 1.92031057847052; }
        }
 
        if (bulletGModel == gModel.G7)
        {
            if (velFps > 4200) { A = 1.29081656775919e-09; M = 3.24121295355962; }
            else if (velFps > 3000) { A = 0.0171422231434847; M = 1.27907168025204; }
            else if (velFps > 1470) { A = 2.33355948302505e-03; M = 1.52693913274526; }
            else if (velFps > 1260) { A = 7.97592111627665e-04; M = 1.67688974440324; }
            else if (velFps > 1110) { A = 5.71086414289273e-12; M = 4.3212826264889; }
            else if (velFps > 960) { A = 3.02865108244904e-17; M = 5.99074203776707; }
            else if (velFps > 670) { A = 7.52285155782535e-06; M = 2.1738019851075; }
            else if (velFps > 540) { A = 1.31766281225189e-05; M = 2.08774690257991; }
            else if (velFps > 0) { A = 1.34504843776525e-05; M = 2.08702306738884; }
        }
 
        if (bulletGModel == gModel.G8)
        {
            if (velFps > 3571) { A = .0112263766252305; M = 1.33207346655961; }
            else if (velFps > 1841) { A = .0167252613732636; M = 1.28662041261785; }
            else if (velFps > 1120) { A = 2.20172456619625e-03; M = 1.55636358091189; }
            else if (velFps > 1088) { A = 2.0538037167098e-16; M = 5.80410776994789; }
            else if (velFps > 976) { A = 5.92182174254121e-12; M = 4.29275576134191; }
            else if (velFps > 0) { A = 4.3917343795117e-05; M = 1.99978116283334; }
        }
 
        if (A != -1 && M != -1 && velFps > 0 && velFps < 100000)
        {
            retardation = A * Math.Pow(velFps, M) / ballisticCoefficient;
            retardation = retardation / 3.2808399;
        }
    }
 
    void calculateDrag()
    {
        drag = DT * retardation;
        float dragFloat = (float)drag;
        vectorDrag = Vector3.Normalize(trueVelocity) * dragFloat;
    }
 
    void calculateSpinDrift()
    {
        double spinDrift = 0.0254 * 1.25 * (stabilityFactor + 1.2) * Math.Pow(timeOfFlight, 1.83);
        float spinX = (float)spinDrift;
 
        vectorSpin = new Vector3(spinX, 0, 0);
        vectorSpin = vectorSpin - previousDrift;
        previousDrift = new Vector3(spinX, 0, 0);
    }
 
    void calculateCoriolis()
    {
        double omega = 0.000072921159;
        double Vave = distance / timeOfFlight;
        double deflectionX = (omega * Math.Pow(distance, 2) * Math.Sin(currentLatitude)) / Vave;
 
        double deflectionY = (1 - 2 * (omega * muzzleVelocity / 9.80665) * Math.Cos(currentLatitude) * Math.Sin(bulletDirection));
        double drop = START_POSITION.y - transform.position.y;
        deflectionY = deflectionY * drop - drop;
 
        float coriolisX = (float)deflectionX;
        float coriolisY = (float)deflectionY;
 
        vectorCoriolis = new Vector3(coriolisX, coriolisY, 0);
        vectorCoriolis = vectorCoriolis - previousCoriolisDeflection;
        previousCoriolisDeflection = new Vector3(coriolisX, coriolisY, 0);
    }
 
    void calculateCentripetal()
    {
        centripetalAcceleration = 2 * 0.0000729 * (muzzleVelocity / -32.2) * Math.Cos(currentLatitude) * Math.Sin(bulletDirection);
        centripetalAcceleration = centripetalAcceleration * dt;
 
        float centripetalY = (float)centripetalAcceleration;
        vectorCentripetal = new Vector3(0, centripetalY, 0);
    }
 
    void updateVelocity()
    {
        rb.rotation = Quaternion.LookRotation(rb.velocity);
        rb.velocity = rb.velocity + GRAVITY;
        rb.velocity = rb.velocity - vectorDrag;
        rb.velocity = rb.velocity + vectorCentripetal;
        rb.position = rb.position + vectorCoriolis;
        rb.position = rb.position + vectorSpin;
        rb.velocity = rb.velocity + windVect * DT;
    }

    void calculateCentripetal()
    {
        centripetalAcceleration = 2 * 0.0000729 * (muzzleVelocity / -32.2) * Math.Cos(currentLatitude) * Math.Sin(bulletDirection);
        centripetalAcceleration = centripetalAcceleration * dt;
 
        float centripetalY = (float)centripetalAcceleration;
        vectorCentripetal = new Vector3(0, centripetalY, 0);
    }
 
    rb.velocity = rb.velocity + vectorCentripetal;

}